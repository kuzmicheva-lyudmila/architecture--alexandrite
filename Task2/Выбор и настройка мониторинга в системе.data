Мотивация:
Мониторинг позволяет контролировать работу системы и выявлять проблемы.
Сейчас:
    - непонятно, на каком этапе заказы «застревают»
    - нет прозрачности по нагрузке на MES и API
    - нельзя предсказать сбои и вовремя на них отреагировать
Мониторинг поможет:
    - сократить потери заказов и снизить процент недовольных клиентов
    - уменьшить время расследования инцидентов
    - предотвращать проблемы до того, как они затронут пользователей

Выбор подхода к мониторингу:
    - Используем четыре золотых сигнала (latency, traffic, errors, saturation)
    - Дополнительно RED (Requests, Errors, Duration) для API и RabbitMQ
    - USE (Utilization, Saturation, Errors) для мониторинга инфраструктуры (БД, серверы)

Список возможных метрик для отслеживания:
1. Метрики RabbitMQ:
    - Number of dead-letter-exchange letters — количество недоставленных сообщений, необходимо для выявления зависших сообщений, ярлыки: queue_name
    - Number of message - количество необработанных сообщений, поиск узких мест, ярлыки: queue_name
    - Time of message - время обработки сообщения от постановки в очередь до обработки, контроль задержек, ярлыки: queue_name
2. Метрики API (RED-модель):
    - Number of requests (RPS) — количество входящих запросов, анализ нагрузки, ярлыки: client_id, endpoint
    - Errors - количество 4xx/5x, поиск проблем API, ярлыки: error_code, endpoint
    - Duration - среднее время ответа, оптимизация работы API, ярлыки: endpoint
3. Метрики MES:
    - Response time (latency) — время обработки запроса в MES, выявление узких мест в расчётах, ярлыки: order_id
    - Number of simultanious sessions — количество необработанных задач, определение перегрузки системы, ярлыки: priority, status
    - CPU % - процент занятого процессора, определение перегрузки системы, ярлыки: instance
    - Memory % - процент занятой памяти, определение перегрузки системы, ярлыки: instance
    - Response time for order status - rак долго заказ находится в статусе, анализ задержек, ярлыки: order_id, status
    - DB: CPU %, Latency - CPU, время отклика запросов на БД, выявление проблем с блокировками, ярлыки: query_type
4. Метрики CRM:
    - Response time (latency) — время обработки запроса в CRM, выявление узких мест в расчётах, ярлыки: order_id
    - Number of simultanious sessions — заказы, которые не меняют статус X часов, поиск проблемных кейсов, ярлыки: order_id, status
5. Метрики инстансов:
    - CPU usage % - процент занятого процессора, определение перегрузки системы, ярлыки: instance
    - Memory usage - размер занятой памяти, определение перегрузки системы, ярлыки: instance
    - Pod restart - количество перезапусков инстанса, определение перегрузки/ошибок системы, ярлыки: instance
    - Network usage - использование сети, определение перегрузки системы, ярлыки: instance
6. Метрики БД:
    - CPU usage % - процент занятого процессора, определение перегрузки системы, ярлыки: db_name
    - Time of query - время отклика запросов на БД, выявление проблем с блокировками, ярлыки: db_name, query_type
    - DB size - размер БД, определение роста размера БД, ярлыки: db_name, table_name
    - DB connections - количество подключений к БД, определение перегрузки системы, ярлыки: db_name

План действий:
1. Настроить сбор метрик
    - Подключить Prometheus для сбора данных.
    - Настроить экспортеры для RabbitMQ, базы данных и API.
2. Организовать визуализацию
    - Развернуть Grafana, создать дашборды по ключевым показателям.
3. Настроить алерты
    - Определить критические пороги (например, очередь задач в MES > 100).
    - Настроить уведомления в специальные каналы для инженеров.
4. Анализ и оптимизация
    - По результатам мониторинга определить первоочередные задачи по улучшению системы.