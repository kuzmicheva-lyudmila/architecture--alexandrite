Анализ системы и сбор необходимых логов
Логи уровня INFO и ERROR нужны для:
    - API: Request/response - запрос/ответ API. Уровень INFO. Время, инстанс, содержимое запроса/ответа
    - API: Ошибки - уровень ERROR. Время, инстанс, ID запроса, код ошибки, stack trace
    - MES: Начало расчёта стоимости	- уровень INFO. Время, инстанс, ID заказа, ID модели
    - MES: Ошибки расчёта стоимости	- уровень ERROR. Время, инстанс, ID заказа, ID модели, код ошибки, stack trace
    - CRM: Подтверждение производства - уровень INFO. Время, инстанс, ID заказа, ID менеджера
    - RabbitMQ: Недоставленные сообщения - уровень ERROR. Время, инстанс, ID очереди, ID сообщения, stack trace
    - Internal Shop: Создание заказа - уровень INFO. Время, инстанс, ID заказа, ID пользователя
    - Internal Shop: Ошибка при передаче заказа в MES - уровень ERROR. Время, инстанс, ID заказа, ID пользователя, код ошибки, stack trace
Уровни логирования
    - INFO: Значимые бизнес-события (изменение статусов заказов, начало и окончание процессов).
    - WARN: Важные события (задержки, проблемы в работе системы).
    - ERROR: Ошибки, которые требуют разбирательства (потеря сообщений, сбои в API).
    - DEBUG: Включается при расследовании инцидентов (детализация SQL-запросов, глубина вызовов).

Мотивация
Внедрение логирования поможет:
    1. Уменьшить время поиска ошибок. Логи дадут разработчикам быстрый доступ к информации о сбоях.
    2. Предотвратить потери заказов. Анализ логов покажет проблемные места (например, частые ошибки передачи заказа).
    3. Улучшить SLA для B2B-заказов. Своевременное выявление проблем API повысит доверие партнёров.
    4. Оптимизировать нагрузку на систему. Анализ логов покажет узкие места (например, задержки в RabbitMQ).
    5. Выявлять DDoS-атаки и аномалии. Логирование аномальных скачков активности поможет защитить систему.
Приоритет:
    1. API (входящие заказы): потеря запросов - потеря клиентов
    1. MES (расчёт стоимости): задержки - потеря заказов
    1. RabbitMQ (очереди заказов): потеря сообщения - потеря заказов
    2. CRM (подтверждение заказов): менеджеры не видят заказы вовремя
    2. Internal Shop (создание заказов): проблемы на этапе оформления

Предлагаемое решение
Технологии
    - Logstash + Elasticsearch + Kibana (ELK-стек): гибкий анализ логов.
    - Prometheus + Grafana: алертинг по критическим ошибкам.
    - Filebeat: лёгкий агент для сбора логов с EC2.
    - OpenTelemetry: обогащение логов трассировкой.
Что нужно сделать?
    1. Настроить Filebeat на серверах, чтобы отправлять логи в Logstash.
    2. Добавить уникальные traceId в логи API, MES, CRM.
    3. Настроить Elasticsearch на хранение логов с ротацией каждые 30 дней.
    4. Добавить дашборды в Kibana и Grafana для просмотра логов и метрик.
    5. Настроить алерты в Prometheus на аномальные события.
Политика безопасности
    1. Маскирование персональных данных: логировать ID пользователей, но не имена и email.
    2. Шифрование данных: все логи шифруются (TLS).
    3. Аутентификация и авторизация: доступ к логам только у DevOps и службы поддержки.
Политика хранения
    1. Elasticsearch: отдельный индекс для каждого сервиса.
    2. Срок хранения: 30 дней для INFO, 90 дней для ERROR.
    3. Размер индексов: не более 10 ГБ на сервис.
Диаграмма контейнеров: https://drive.google.com/file/d/1GKbAvyKNXmfm_lhKruzHeu2_eu1-KaEu/view?usp=sharing

Анализ логов и алерты
    - Алерты на рост ошибок API: если 5хх стало больше 10% от запросов.
    - Анализ скачков заказов: если за минуту появилось 10 000 заказов (DDoS).
    - Отслеживание потерь сообщений в RabbitMQ: если пропущено >5% сообщений.

